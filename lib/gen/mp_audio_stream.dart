// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Audio native module
class AudioStreamNative {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AudioStreamNative(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AudioStreamNative.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int ma_stream_init(
    int max_buffer_size,
    int keep_buffer_size,
    int channels,
    int sample_rate,
  ) {
    return _ma_stream_init(
      max_buffer_size,
      keep_buffer_size,
      channels,
      sample_rate,
    );
  }

  late final _ma_stream_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('ma_stream_init');
  late final _ma_stream_init =
      _ma_stream_initPtr.asFunction<int Function(int, int, int, int)>();

  void ma_stream_uninit() {
    return _ma_stream_uninit();
  }

  late final _ma_stream_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ma_stream_uninit');
  late final _ma_stream_uninit =
      _ma_stream_uninitPtr.asFunction<void Function()>();

  int ma_stream_push(
    ffi.Pointer<ffi.Float> arg0,
    int arg1,
    int arg2,
  ) {
    return _ma_stream_push(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ma_stream_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Float>, ffi.Int, ffi.Int)>>('ma_stream_push');
  late final _ma_stream_push = _ma_stream_pushPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, int, int)>();

  int push_opus(
    ffi.Pointer<ffi.Uint8> arg0,
    int arg1,
    int arg2,
  ) {
    return _push_opus(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _push_opusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int)>>('push_opus');
  late final _push_opus = _push_opusPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<ffi.Float> get_mic_data(
    int arg0,
  ) {
    return _get_mic_data(
      arg0,
    );
  }

  late final _get_mic_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(ffi.Int)>>(
          'get_mic_data');
  late final _get_mic_data =
      _get_mic_dataPtr.asFunction<ffi.Pointer<ffi.Float> Function(int)>();

  void ma_stream_stat_reset() {
    return _ma_stream_stat_reset();
  }

  late final _ma_stream_stat_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ma_stream_stat_reset');
  late final _ma_stream_stat_reset =
      _ma_stream_stat_resetPtr.asFunction<void Function()>();

  void parlo_remove_user(
    int arg0,
  ) {
    return _parlo_remove_user(
      arg0,
    );
  }

  late final _parlo_remove_userPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'parlo_remove_user');
  late final _parlo_remove_user =
      _parlo_remove_userPtr.asFunction<void Function(int)>();

  bool is_mic_ready(
    int arg0,
  ) {
    return _is_mic_ready(
      arg0,
    );
  }

  late final _is_mic_readyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Uint32)>>(
          'is_mic_ready');
  late final _is_mic_ready = _is_mic_readyPtr.asFunction<bool Function(int)>();

  int init_dart_api_dl(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _init_dart_api_dl(
      data,
    );
  }

  late final _init_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_dart_api_dl');
  late final _init_dart_api_dl =
      _init_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void init_port(
    int arg0,
    int arg1,
  ) {
    return _init_port(
      arg0,
      arg1,
    );
  }

  late final _init_portPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'init_port');
  late final _init_port = _init_portPtr.asFunction<void Function(int, int)>();

  void set_treshold(
    double arg0,
  ) {
    return _set_treshold(
      arg0,
    );
  }

  late final _set_tresholdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>(
          'set_treshold');
  late final _set_treshold =
      _set_tresholdPtr.asFunction<void Function(double)>();
}
